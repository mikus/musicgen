""" This module prepares midi file data and feeds it to the neural
    network for training
    This module generates notes for a midi file using the
    trained neural network """
import glob
import os
import re
import sys

import numpy as np
from music21 import instrument, note, stream, chord

from .data import Data
from .model import Model


dnn_data_path = 'data/dnn'


def start_training(notes_path, weights_dir, patterns_path, max_patterns=0):
    """ Train a Neural Network to generate music """
    data = Data.load_training_set(patterns_path, max_files=max_patterns)
    data.store(notes_path)

    network_input, network_output = data.to_sequences(sequence_length=100, generate_output=True)

    model = Model(network_input.shape, data.distinct_notes_count)
    model.train(network_input, network_output, epochs=300, batch_size=128, weights_dir=weights_dir)


def resume_training(notes_path, weights_dir):
    """ Train a Neural Network to generate music """
    data = Data.load(notes_path)
    input_weights = choose_best_weights(weights_dir)

    network_input, network_output = data.to_sequences(sequence_length=100, generate_output=True)

    model = Model(network_input.shape, data.distinct_notes_count, input_weights)
    model.train(network_input, network_output, epochs=300, batch_size=128, weights_dir=weights_dir)


def generate(samples, output_path, notes_path, weights_path):
    """ Generate a piano midi file """
    # load the notes used to train the model
    data = Data.load(notes_path)
    network_input = data.to_sequences(100)
    model = Model(network_input.shape, data.distinct_notes_count, weights_path)
    prediction_output = generate_notes(samples, model, network_input, data)
    create_midi(prediction_output, output_path)


def generate_notes(samples, model, network_input, data):
    """ Generate notes from the neural network based on a sequence of notes """
    # pick a random sequence from the input as a starting point for the prediction
    start = np.random.randint(0, len(network_input) - 1)

    pattern = network_input[start]
    output_indexes = model.generate(pattern, samples, data.output_to_input)
    output_notes = [data.index_to_note[index] for index in output_indexes]
    return output_notes


def create_midi(prediction_output, output_path):
    """ convert the output from the prediction to notes and create a midi file
        from the notes """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)

    midi_stream.write('midi', fp=output_path)


def populate_paths(name, create_dirs=False):
    training_artifacts_dir = '{}/{}'.format(dnn_data_path, name)
    weights_dir = '{}/weights'.format(training_artifacts_dir)
    notes_path = '{}/notes'.format(training_artifacts_dir)
    if create_dirs:
        os.makedirs(weights_dir)
    return notes_path, weights_dir


def choose_best_weights(weights_dir):
    pattern = re.compile(r'\w+-\d+-([\d\.]+)\.hdf5$')

    best_file = None
    best_value = sys.float_info.max
    for file in glob.glob("{}/*.hdf5".format(weights_dir)):
        match = pattern.search(file)
        if match:
            loss = float(match.group(1))
            if loss < best_value:
                best_value = loss
                best_file = file
        else:
            print('{} not matched'.format(file))

    if best_file is None:
        raise ValueError('Weights file not found')

    return best_file
